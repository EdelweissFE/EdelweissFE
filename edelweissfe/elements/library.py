#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#  ---------------------------------------------------------------------
#
#  _____    _      _              _         _____ _____
# | ____|__| | ___| |_      _____(_)___ ___|  ___| ____|
# |  _| / _` |/ _ \ \ \ /\ / / _ \ / __/ __| |_  |  _|
# | |__| (_| |  __/ |\ V  V /  __/ \__ \__ \  _| | |___
# |_____\__,_|\___|_| \_/\_/ \___|_|___/___/_|   |_____|
#
#
#  Unit of Strength of Materials and Structural Analysis
#  University of Innsbruck,
#  2017 - today
#
#  Daniel Reitmair daniel.reitmair@uibk.ac.at
#
#  This file is part of EdelweissFE.
#
#  This library is free software; you can redistribute it and/or
#  modify it under the terms of the GNU Lesser General Public
#  License as published by the Free Software Foundation; either
#  version 2.1 of the License, or (at your option) any later version.
#
#  The full text of the license can be found in the file LICENSE.md at
#  the top level directory of EdelweissFE.
#  ---------------------------------------------------------------------

import numpy as np

from edelweissfe.utils.caseinsensitivedict import CaseInsensitiveDict

# element parameters 2D
w1 = (5 / 9) ** 2
w2 = (5 / 9) * (8 / 9)
w3 = (8 / 9) ** 2
# element parameters 3D
s8 = 1 / np.sqrt(3) * np.array([-1, 1, 1, -1])  # get s
t8 = 1 / np.sqrt(3) * np.array([-1, -1, 1, 1])  # get z
s20 = np.array([-1, 0, 1])  # get s
t20 = np.array([-1, -1, -1, 0, 0, 0, 1, 1, 1])  # get t
w1H = (5 / 9) ** 3
w2H = (5 / 9) ** 2 * (8 / 9)
w3H = (5 / 9) * (8 / 9) ** 2
w4H = (8 / 9) ** 3
wI = np.array([w1H, w2H, w1H])
wII = np.array([w2H, w3H, w2H])

# Element library
elLibrary = CaseInsensitiveDict(
    # element types for displacementelement
    CPE4=dict(
        elClass="DisplacementElement",
        nNodes=4,
        nDof=8,
        dofIndices=np.arange(0, 8),
        ensightType="quad4",
        nSpatialDimensions=2,
        nInt=4,
        xi=1 / np.sqrt(3) * np.array([1, 1, -1, -1]),
        eta=1 / np.sqrt(3) * np.array([1, -1, -1, 1]),
        zeta=None,
        w=np.ones(4),
        matSize=3,
        index=np.array([0, 1, 3]),
        plStrain=True,
    ),
    CPE4R=dict(
        elClass="DisplacementElement",
        nNodes=4,
        nDof=8,
        dofIndices=np.arange(0, 8),
        ensightType="quad4",
        nSpatialDimensions=2,
        nInt=1,
        xi=np.array([0]),
        eta=np.array([0]),
        zeta=None,
        w=np.array([4]),
        matSize=3,
        index=np.array([0, 1, 3]),
        plStrain=True,
    ),
    CPE4E=dict(
        elClass="DisplacementElement",
        nNodes=4,
        nDof=8,
        dofIndices=np.arange(0, 8),
        ensightType="quad4",
        nSpatialDimensions=2,
        nInt=9,
        xi=np.sqrt(0.6) * np.array([0, -1, -1, 1, 1, -1, 0, 1, 0]),
        eta=np.sqrt(0.6) * np.array([0, -1, 1, 1, -1, 0, 1, 0, -1]),
        zeta=None,
        w=np.array([w3, w1, w1, w1, w1, w2, w2, w2, w2]),
        matSize=3,
        index=np.array([0, 1, 3]),
        plStrain=True,
    ),
    CPE8=dict(
        elClass="DisplacementElement",
        nNodes=8,
        nDof=16,
        dofIndices=np.arange(0, 16),
        ensightType="quad8",
        nSpatialDimensions=2,
        nInt=9,
        xi=np.sqrt(0.6) * np.array([0, -1, -1, 1, 1, -1, 0, 1, 0]),
        eta=np.sqrt(0.6) * np.array([0, -1, 1, 1, -1, 0, 1, 0, -1]),
        zeta=None,
        w=np.array([w3, w1, w1, w1, w1, w2, w2, w2, w2]),
        matSize=3,
        index=np.array([0, 1, 3]),
        plStrain=True,
    ),
    CPE8R=dict(
        elClass="DisplacementElement",
        nNodes=8,
        nDof=16,
        dofIndices=np.arange(0, 16),
        ensightType="quad8",
        nSpatialDimensions=2,
        nInt=4,
        xi=1 / np.sqrt(3) * np.array([1, 1, -1, -1]),
        eta=1 / np.sqrt(3) * np.array([1, -1, -1, 1]),
        zeta=None,
        w=np.ones(4),
        matSize=3,
        index=np.array([0, 1, 3]),
        plStrain=True,
    ),
    CPS4=dict(
        elClass="DisplacementElement",
        nNodes=4,
        nDof=8,
        dofIndices=np.arange(0, 8),
        ensightType="quad4",
        nSpatialDimensions=2,
        nInt=4,
        xi=1 / np.sqrt(3) * np.array([1, 1, -1, -1]),
        eta=1 / np.sqrt(3) * np.array([1, -1, -1, 1]),
        zeta=None,
        w=np.ones(4),
        matSize=3,
        index=np.array([0, 1, 3]),
        plStrain=False,
    ),
    CPS4R=dict(
        elClass="DisplacementElement",
        nNodes=4,
        nDof=8,
        dofIndices=np.arange(0, 8),
        ensightType="quad4",
        nSpatialDimensions=2,
        nInt=1,
        xi=np.array([0]),
        eta=np.array([0]),
        zeta=None,
        w=np.array([4]),
        matSize=3,
        index=np.array([0, 1, 3]),
        plStrain=False,
    ),
    CPS4E=dict(
        elClass="DisplacementElement",
        nNodes=4,
        nDof=8,
        dofIndices=np.arange(0, 8),
        ensightType="quad4",
        nSpatialDimensions=2,
        nInt=9,
        xi=np.sqrt(0.6) * np.array([0, -1, -1, 1, 1, -1, 0, 1, 0]),
        eta=np.sqrt(0.6) * np.array([0, -1, 1, 1, -1, 0, 1, 0, -1]),
        zeta=None,
        w=np.array([w3, w1, w1, w1, w1, w2, w2, w2, w2]),
        matSize=3,
        index=np.array([0, 1, 3]),
        plStrain=False,
    ),
    CPS8=dict(
        elClass="DisplacementElement",
        nNodes=8,
        nDof=16,
        dofIndices=np.arange(0, 16),
        ensightType="quad8",
        nSpatialDimensions=2,
        nInt=9,
        xi=np.sqrt(0.6) * np.array([0, -1, -1, 1, 1, -1, 0, 1, 0]),
        eta=np.sqrt(0.6) * np.array([0, -1, 1, 1, -1, 0, 1, 0, -1]),
        zeta=None,
        w=np.array([w3, w1, w1, w1, w1, w2, w2, w2, w2]),
        matSize=3,
        index=np.array([0, 1, 3]),
        plStrain=False,
    ),
    CPS8R=dict(
        elClass="DisplacementElement",
        nNodes=8,
        nDof=16,
        dofIndices=np.arange(0, 16),
        ensightType="quad8",
        nSpatialDimensions=2,
        nInt=4,
        xi=1 / np.sqrt(3) * np.array([1, 1, -1, -1]),
        eta=1 / np.sqrt(3) * np.array([1, -1, -1, 1]),
        zeta=None,
        w=np.ones(4),
        matSize=3,
        index=np.array([0, 1, 3]),
        plStrain=False,
    ),
    C3D8=dict(
        elClass="DisplacementElement",
        nNodes=8,
        nDof=24,
        dofIndices=np.arange(0, 24),
        ensightType="hexa8",
        nSpatialDimensions=3,
        nInt=8,
        xi=1 / np.sqrt(3) * np.hstack([-np.ones(4), np.ones(4)]),
        eta=np.hstack([t8, t8]),
        zeta=np.hstack([s8, s8]),
        w=np.ones(8),
        matSize=6,
        index=np.arange(6),
        plStrain=None,
    ),
    C3D8R=dict(
        elClass="DisplacementElement",
        nNodes=8,
        nDof=24,
        dofIndices=np.arange(0, 24),
        ensightType="hexa8",
        nSpatialDimensions=3,
        nInt=1,
        xi=np.array([0]),
        eta=np.array([0]),
        zeta=np.array([0]),
        w=np.array([8]),
        matSize=6,
        index=np.arange(6),
        plStrain=None,
    ),
    C3D8E=dict(
        elClass="DisplacementElement",
        nNodes=8,
        nDof=24,
        dofIndices=np.arange(0, 24),
        ensightType="hexa8",
        nSpatialDimensions=3,
        nInt=27,
        xi=np.sqrt(0.6) * np.hstack([-np.ones(9), np.zeros(9), np.ones(9)]),
        eta=np.sqrt(0.6) * np.hstack([t20, t20, t20]),
        zeta=np.sqrt(0.6) * np.hstack([s20 for i in range(9)]),
        w=np.hstack([wI, wII, wI, wII, np.array([w3H, w4H, w3H]), wII, wI, wII, wI]),
        matSize=6,
        index=np.arange(6),
        plStrain=None,
    ),
    C3D20=dict(
        elClass="DisplacementElement",
        nNodes=20,
        nDof=60,
        dofIndices=np.arange(0, 60),
        ensightType="hexa20",
        nSpatialDimensions=3,
        nInt=27,
        xi=np.sqrt(0.6) * np.hstack([-np.ones(9), np.zeros(9), np.ones(9)]),
        eta=np.sqrt(0.6) * np.hstack([t20, t20, t20]),
        zeta=np.sqrt(0.6) * np.hstack([s20 for i in range(9)]),
        w=np.hstack([wI, wII, wI, wII, np.array([w3H, w4H, w3H]), wII, wI, wII, wI]),
        matSize=6,
        index=np.arange(6),
        plStrain=None,
    ),
    C3D20R=dict(
        elClass="DisplacementElement",
        nNodes=20,
        nDof=60,
        dofIndices=np.arange(0, 60),
        ensightType="hexa20",
        nSpatialDimensions=3,
        nInt=8,
        xi=1 / np.sqrt(3) * np.hstack([-np.ones(4), np.ones(4)]),
        eta=np.hstack([t8, t8]),
        zeta=np.hstack([s8, s8]),
        w=np.ones(8),
        matSize=6,
        index=np.arange(6),
        plStrain=None,
    ),
    # element types for displacementtlelement
    CPE4TL=dict(
        elClass="DisplacementTLElement",
        nNodes=4,
        nDof=8,
        dofIndices=np.arange(0, 8),
        ensightType="quad4",
        nSpatialDimensions=2,
        nInt=4,
        xi=1 / np.sqrt(3) * np.array([1, 1, -1, -1]),
        eta=1 / np.sqrt(3) * np.array([1, -1, -1, 1]),
        zeta=None,
        w=np.ones(4),
        matSize=3,
        index=np.array([0, 1, 3]),
        plStrain=True,
    ),
    CPE4RTL=dict(
        elClass="DisplacementTLElement",
        nNodes=4,
        nDof=8,
        dofIndices=np.arange(0, 8),
        ensightType="quad4",
        nSpatialDimensions=2,
        nInt=1,
        xi=np.array([0]),
        eta=np.array([0]),
        zeta=None,
        w=np.array([4]),
        matSize=3,
        index=np.array([0, 1, 3]),
        plStrain=True,
    ),
    CPE4ETL=dict(
        elClass="DisplacementTLElement",
        nNodes=4,
        nDof=8,
        dofIndices=np.arange(0, 8),
        ensightType="quad4",
        nSpatialDimensions=2,
        nInt=9,
        xi=np.sqrt(0.6) * np.array([0, -1, -1, 1, 1, -1, 0, 1, 0]),
        eta=np.sqrt(0.6) * np.array([0, -1, 1, 1, -1, 0, 1, 0, -1]),
        zeta=None,
        w=np.array([w3, w1, w1, w1, w1, w2, w2, w2, w2]),
        matSize=3,
        index=np.array([0, 1, 3]),
        plStrain=True,
    ),
    CPE8TL=dict(
        elClass="DisplacementTLElement",
        nNodes=8,
        nDof=16,
        dofIndices=np.arange(0, 16),
        ensightType="quad8",
        nSpatialDimensions=2,
        nInt=9,
        xi=np.sqrt(0.6) * np.array([0, -1, -1, 1, 1, -1, 0, 1, 0]),
        eta=np.sqrt(0.6) * np.array([0, -1, 1, 1, -1, 0, 1, 0, -1]),
        zeta=None,
        w=np.array([w3, w1, w1, w1, w1, w2, w2, w2, w2]),
        matSize=3,
        index=np.array([0, 1, 3]),
        plStrain=True,
    ),
    CPE8RTL=dict(
        elClass="DisplacementTLElement",
        nNodes=8,
        nDof=16,
        dofIndices=np.arange(0, 16),
        ensightType="quad8",
        nSpatialDimensions=2,
        nInt=4,
        xi=1 / np.sqrt(3) * np.array([1, 1, -1, -1]),
        eta=1 / np.sqrt(3) * np.array([1, -1, -1, 1]),
        zeta=None,
        w=np.ones(4),
        matSize=3,
        index=np.array([0, 1, 3]),
        plStrain=True,
    ),
    CPS4TL=dict(
        elClass="DisplacementTLElement",
        nNodes=4,
        nDof=8,
        dofIndices=np.arange(0, 8),
        ensightType="quad4",
        nSpatialDimensions=2,
        nInt=4,
        xi=1 / np.sqrt(3) * np.array([1, 1, -1, -1]),
        eta=1 / np.sqrt(3) * np.array([1, -1, -1, 1]),
        zeta=None,
        w=np.ones(4),
        matSize=3,
        index=np.array([0, 1, 3]),
        plStrain=False,
    ),
    CPS4RTL=dict(
        elClass="DisplacementTLElement",
        nNodes=4,
        nDof=8,
        dofIndices=np.arange(0, 8),
        ensightType="quad4",
        nSpatialDimensions=2,
        nInt=1,
        xi=np.array([0]),
        eta=np.array([0]),
        zeta=None,
        w=np.array([4]),
        matSize=3,
        index=np.array([0, 1, 3]),
        plStrain=False,
    ),
    CPS4ETL=dict(
        elClass="DisplacementTLElement",
        nNodes=4,
        nDof=8,
        dofIndices=np.arange(0, 8),
        ensightType="quad4",
        nSpatialDimensions=2,
        nInt=9,
        xi=np.sqrt(0.6) * np.array([0, -1, -1, 1, 1, -1, 0, 1, 0]),
        eta=np.sqrt(0.6) * np.array([0, -1, 1, 1, -1, 0, 1, 0, -1]),
        zeta=None,
        w=np.array([w3, w1, w1, w1, w1, w2, w2, w2, w2]),
        matSize=3,
        index=np.array([0, 1, 3]),
        plStrain=False,
    ),
    CPS8TL=dict(
        elClass="DisplacementTLElement",
        nNodes=8,
        nDof=16,
        dofIndices=np.arange(0, 16),
        ensightType="quad8",
        nSpatialDimensions=2,
        nInt=9,
        xi=np.sqrt(0.6) * np.array([0, -1, -1, 1, 1, -1, 0, 1, 0]),
        eta=np.sqrt(0.6) * np.array([0, -1, 1, 1, -1, 0, 1, 0, -1]),
        zeta=None,
        w=np.array([w3, w1, w1, w1, w1, w2, w2, w2, w2]),
        matSize=3,
        index=np.array([0, 1, 3]),
        plStrain=False,
    ),
    CPS8RTL=dict(
        elClass="DisplacementTLElement",
        nNodes=8,
        nDof=16,
        dofIndices=np.arange(0, 16),
        ensightType="quad8",
        nSpatialDimensions=2,
        nInt=4,
        xi=1 / np.sqrt(3) * np.array([1, 1, -1, -1]),
        eta=1 / np.sqrt(3) * np.array([1, -1, -1, 1]),
        zeta=None,
        w=np.ones(4),
        matSize=3,
        index=np.array([0, 1, 3]),
        plStrain=False,
    ),
    C3D8TL=dict(
        elClass="DisplacementTLElement",
        nNodes=8,
        nDof=24,
        dofIndices=np.arange(0, 24),
        ensightType="hexa8",
        nSpatialDimensions=3,
        nInt=8,
        xi=1 / np.sqrt(3) * np.hstack([-np.ones(4), np.ones(4)]),
        eta=np.hstack([t8, t8]),
        zeta=np.hstack([s8, s8]),
        w=np.ones(8),
        matSize=6,
        index=np.arange(6),
        plStrain=None,
    ),
    C3D8RTL=dict(
        elClass="DisplacementTLElement",
        nNodes=8,
        nDof=24,
        dofIndices=np.arange(0, 24),
        ensightType="hexa8",
        nSpatialDimensions=3,
        nInt=1,
        xi=np.array([0]),
        eta=np.array([0]),
        zeta=np.array([0]),
        w=np.array([8]),
        matSize=6,
        index=np.arange(6),
        plStrain=None,
    ),
    C3D8ETL=dict(
        elClass="DisplacementTLElement",
        nNodes=8,
        nDof=24,
        dofIndices=np.arange(0, 24),
        ensightType="hexa8",
        nSpatialDimensions=3,
        nInt=27,
        xi=np.sqrt(0.6) * np.hstack([-np.ones(9), np.zeros(9), np.ones(9)]),
        eta=np.sqrt(0.6) * np.hstack([t20, t20, t20]),
        zeta=np.sqrt(0.6) * np.hstack([s20 for i in range(9)]),
        w=np.hstack([wI, wII, wI, wII, np.array([w3H, w4H, w3H]), wII, wI, wII, wI]),
        matSize=6,
        index=np.arange(6),
        plStrain=None,
    ),
    C3D20TL=dict(
        elClass="DisplacementTLElement",
        nNodes=20,
        nDof=60,
        dofIndices=np.arange(0, 60),
        ensightType="hexa20",
        nSpatialDimensions=3,
        nInt=27,
        xi=np.sqrt(0.6) * np.hstack([-np.ones(9), np.zeros(9), np.ones(9)]),
        eta=np.sqrt(0.6) * np.hstack([t20, t20, t20]),
        zeta=np.sqrt(0.6) * np.hstack([s20 for i in range(9)]),
        w=np.hstack([wI, wII, wI, wII, np.array([w3H, w4H, w3H]), wII, wI, wII, wI]),
        matSize=6,
        index=np.arange(6),
        plStrain=None,
    ),
    C3D20RTL=dict(
        elClass="DisplacementTLElement",
        nNodes=20,
        nDof=60,
        dofIndices=np.arange(0, 60),
        ensightType="hexa20",
        nSpatialDimensions=3,
        nInt=8,
        xi=1 / np.sqrt(3) * np.hstack([-np.ones(4), np.ones(4)]),
        eta=np.hstack([t8, t8]),
        zeta=np.hstack([s8, s8]),
        w=np.ones(8),
        matSize=6,
        index=np.arange(6),
        plStrain=None,
    ),
)
# add variations
elLibrary.update(
    {  # displacementelement
        "CPE4N": elLibrary["CPE4"],
        "CPE8N": elLibrary["CPE8"],
        "CPS4N": elLibrary["CPS4"],
        "CPS8N": elLibrary["CPS8"],
        "C3D8N": elLibrary["C3D8"],
        "C3D20N": elLibrary["C3D20"],
        # displacementTLelement
        "CPE4NTL": elLibrary["CPE4TL"],
        "CPE8NTL": elLibrary["CPE8TL"],
        "CPS4NTL": elLibrary["CPS4TL"],
        "CPS8NTL": elLibrary["CPS8TL"],
        "C3D8NTL": elLibrary["C3D8TL"],
        "C3D20NTL": elLibrary["C3D20TL"],
    }
)
